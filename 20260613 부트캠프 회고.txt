#좋았던 점
- 강의실까지 오는데 30분밖에 걸리지않았다. 앞으로 더 자고 나올 수 있을거같다!
새로운 밥친구를 사겼다.
강사님 픽인 마제소바가 무척 맛있었다.
강사님이 빅뱅이론 쉘든같아서 늘 재밌다

#아쉬웠던 점
-너무 일찍 도착해서 강의실이 닫혀있었다.

#배운 점
-## 딕셔너리 만들기
"""
딕셔너리는 { }(중괄호) 안에 키: 값 형식으로 저장하며 각 키와 값은 ,(콤마)로 구분해줍니다.

* `딕셔너리 = {키1: 값1, 키2: 값2}`
"""

"""딕셔너리는 키를 먼저 지정하고 :(콜론)을 붙여서 값을 표현합니다. 
특히 키에는 값을 하나만 지정할 수 있으며 이런 특성을 따서 키-값 쌍(key-value pair)이라 부릅니다(키-값은 1:1 대응).

"""## 딕셔너리의 키에 접근하고 값 할당하기"""

# 딕셔너리의 키에 접근할 때는 딕셔너리 뒤에 [ ](대괄호)를 사용하며 [ ] 안에 키를 지정해주면 됩니다.



"""### 딕셔너리에 키를 지정하지 않으면?"""

# 딕셔너리에 키를 지정하지 않은 상태는 해당 딕셔너리 전체를 뜻합니다.
# 따라서 다음과 같이 딕셔너리를 출력하면 { }를 포함하여 딕셔너리 전체가 출력됩니다.

"""### 딕셔너리의 키에 값 할당하기

이제 딕셔너리의 키에 값을 할당해보겠습니다. 딕셔너리는 [ ]로 키에 접근한 뒤 값을 할당합니다.
* `딕셔너리[키] = 값`

"""### 해시

딕셔너리는 해시(Hash) 기법을 이용해서 데이터를 저장합니다. 
보통 딕셔너리와 같은 키-값 형태의 자료형을 해시, 해시 맵, 해시테이블 등으로 부르기도 합니다.

# 조건문

조건문은 특정 조건일 때 코드를 실행하는 문법입니다. 
프로그램을 만들다 보면 여러 가지 상황을 처리해야 하는 경우가 생기죠.
 이때 조건문은 다양한 상황에 대처할 때 사용합니다.

## if 조건문 사용하기

if 조건문은 if에 조건식을 지정하고 :(콜론)을 붙이며 다음 줄에 실행할 코드가 옵니다. 
이때 실행할 코드는 반드시 들여쓰기를 해야 합니다.

```
if 조건식:
     코드
"""### if 조건문의 기본 형태와 실행 흐름 알아보기!!!!!!!!!!!!!

이제 if 조건문을 자세히 알아보겠습니다. 
파이썬에서 if 조건문은 if 조건식: 형식으로 사용하며 그다음 줄에는 들여쓰기를 한 뒤 
조건식이 만족할 때 실행할 코드를 넣습니다. 특히 이 조건식이 만족할 때 실행할 코드를 if 본문(if body)이라고 부릅니다.

여기서는 변수 x에 10을 할당한 뒤 if 조건문으로 x가 10과 같은지 검사하였습니다. 
조건식은 x == 10과 같은 형식으로 지정해주는데 ==은 두 값이 "같을 때" 라는 뜻입니다.
즉, if x == 10:은 x가 10과 같은지 비교한 뒤 같으면 다음에 오는 코드를 실행하라는 뜻이 됩니다. 따
라서 x는 10이고 조건식을 만족하므로 그다음 줄의 print가 실행되어 '10입니다.'가 출력됩니다.

보통 if의 조건식이 만족하면 참( True), 만족하지 않으면 거짓(False)이라고 부릅니다.

### if 조건문을 사용할 때 주의할 점
if 조건문을 사용할 때 주의할 점이 있는데 파이썬에서는 =을 할당으로 사용하고 있으므로
 값을 비교할 때는 =을 두 개 붙여서 ==로 사용해야 합니다. 자주 틀리는 부분이니 
`if`**안에서 ==을 사용했는지 반드시 확인하세요. 다음과 같이 if에 =을 사용하면 문법 에러가 발생합니다.**

"""if 다음 줄에 pass라는 특별한 키워드를 넣었습니다. 
여기서 pass는 아무 일도 하지 않고 그냥 넘어간다는 뜻입니다. 
파이썬에서는 if 다음 줄에 아무 코드도 넣지 않으면 
에러가 발생하므로 if 조건문의 형태를 유지하기 위해 pass를 사용합니다.

pass는 아무 일도 하지 않는 코드라서 의미가 없을 것 같지만 나중에 작성해야 할 코드를 표시할 때 사용할 수 있습니다.
 즉, 다음과 같이 pass만 넣고 나중에 할 일은 주석으로 남겨놓는 방식입니다.
"""

"""## else

## else를 사용하여 두 방향으로 분기하기
지금까지 if 조건문으로 조건식에 맞는 코드만 실행했습니다. 
if에 else를 사용하면 조건식이 만족할 때와 만족하지 않을 때 각각 다른 코드를 실행할 수 있습니다. 
즉, 프로그램이 두 방향으로 분기하는 것이죠.

else는 if 조건문 뒤에 오며 단독으로 사용할 수 없습니다.
 그리고 if와 마찬가지로 else도 :(콜론)을 붙이며 다음 줄에 실행할 코드가 옵니다.

```
if 조건식:
     코드1
else:
     코드2
```
"""
"""### if와 else의 기본 형태와 실행 흐름 알아보기

else는 if의 조건식이 만족하지 않을 때 코드를 실행합니다. 
여기서는 x에 5가 들어있어서 x == 10을 만족하지 않으므로 else의 print가 실행되어 '10이 아닙니다.'가 출력됩니다.

즉, 조건식이 참(True)이면 if의 코드(if 본문)가 실행되고, 거짓(False)이면 else의 코드(else 본문)가 실행됩니다.

### 변수에 값 할당을 if, else로 축약하기 (삼항연산자)
"""

# 변수 x에 10이 들어있으면 y에 x를 할당하고, 아니면 y에 0을 할당하는 코드는 다음과 같이 만들 수 있습니다.

# 이렇게 if, else에서 변수에 값을 할당할 때는 변수 = 값 if 조건문 else 값 형식으로 축약할 수 있으며,
# 이런 문법을 조건부 표현식(conditional expression) 또는 삼항연산자라고 부릅니다.

"""### 중첩 if 조건문과 논리 연산자"""

# 그럼 이런 논리 연산자를 어디에 사용할까요? 
보통 여러 조건을 판단할 때 if를 계속 나열해서 중첩 if 조건문으로 만드는 경우가 많습니다.

# if로 x가 0보다 큰지 검사하고(0보다 크면 양수), 다시 if로 20보다 작은지 검사했습니다. 
이런 중첩 if 조건문은 and 논리 연산자를 사용해서 if 하나로 줄일 수 있습니다.

# x가 0보다 크면서 20보다 작을 때처럼 and 논리 연산자를 사용해서 두 조건을 모두 만족하면
 '20보다 작은 양수입니다.'를 출력하도록 만들었습니다.
# 특히 파이썬에서는 이 조건식을 더 간단하게 만들 수 있습니다.

"""0 < x < 20처럼 부등호를 연달아서 사용했습니다. 조건식이 알아보기 쉬워졌죠? 
단, 여기서는 0이 앞에 왔으므로 0보다 큰지 판단하는 부등호는 방향이 반대로 바뀌었습니다. 
이처럼 조건식을 만들 때는 부등호의 방향과는 관계 없이 조건의 뜻만 만족하면 됩니다. 
즉, x > 0과 0 < x의 뜻은 같습니다.

## elif 사용하기

프로그램을 만들다 보면 참, 거짓으로만 분기하는 것은 한계가 있습니다. 
실제로는 두 가지 이상의 다양한 상황이 발생하죠.

여러 가지 상황을 처리하는 대표적인 예는 음료수 자판기가 있습니다.

자판기 안에는 각각 다른 종류의 음료수가 들어있고, 버튼을 누르면 해당 버튼에 해당하는 음료수가 나옵니다. 
이걸 elif로 만들면 다음과 같은 모양이 됩니다.
```
if 콜라 버튼을 눌렀다면:
    콜라를 내보냄
elif 사이다 버튼을 눌렀다면:
    사이다를 내보냄
elif 환타 버튼을 눌렀다면:
    환타를 내보냄:
else:
    제공하지 않는 메뉴
```

즉, elif는 조건식을 여러 개 지정하여 각 조건 마다 다른 코드를 실행할 수 있습니다.

elif는 else인 상태에서 조건식을 지정할 때 사용하며 else if라는 뜻입니다. 
물론 if, else와 마찬가지로 조건식 끝에 :(콜론)을 붙여야 하고, elif 단독으로 사용할 수 없습니다.

```
if 조건식:
     코드1
elif 조건식:
     코드2
```

"""### if, elif, else를 모두 사용하기

elif와 else는 단독으로 사용할 수 없으며 if, else 형태로 사용하거나, if, elif, else 형태로 사용합니다. 
이번에는 if, elif, else를 모두 사용해보겠습니다.

```
if 조건식:
    코드1
elif 조건식:
    코드2
else:
    코드3
```

# 시퀀스 자료형
"""
우리가 지금까지 사용했던 리스트, 튜플, range, 문자열을 잘 보면 공통점이 있습니다. 
이들 모두 값이 연속적(sequence)으로 이어져 있다는 점입니다.

파이썬에서는 리스트, 튜플, range, 문자열처럼 값이 연속적으로 
이어진 자료형을 시퀀스 자료형(sequence types)라고 부릅니다.

## 시퀀스 자료형의 공통 기능 사용하기

### 특정 값이 있는지 확인하기
먼저 시퀀스 객체 안에 특정 값이 있는지 확인하는 방법부터 알아보겠습니다.
 다음은 리스트 a에서 30과 100이 있는지 확인합니다.

* `값 in 시퀀스객체`
"""시퀀스 객체에 in 연산자를 사용했을 때 특정 값이 있으면 True, 없으면 False가 나옵니다. 
따라서 리스트 a에 30이 있으므로 True, 100이 없으므로 False가 나옵니다.
반대로 in 앞에 not을 붙이면 특정 값이 없는지 확인합니다.

* `값 not in 시퀀스객체`
"""

"""### 시퀀스 객체 연결하기 (concat, concatenate)

시퀀스 객체는 + 연산자를 사용하여 객체를 서로 연결하여 새 객체를 만들 수 있습니다.

* `시퀀스객체1 + 시퀀스객체2`
"""

# 문자열은 + 연산자로 여러 문자열을 연결할 수 있습니다.

"""### 문자열에 숫자 연결하기"""

# 숫자는 시퀀스 자료형이 아님! -> 문자열과 +를 통해서 연결할 수 없음.

"""문자열에 정수를 연결하려고 하면 에러가 발생합니다(정수를 문자열로 변환할 수 없어서 TypeError가 발생합니다).
 이 문제를 해결하려면 str을 사용하여 숫자(정수, 실수)를 문자열로 변환하면 됩니다.

"""### 시퀀스 객체 반복하기

이번에는 시퀀스 객체를 반복하는 방법입니다. 
`*` 연산자는 시퀀스 객체를 특정 횟수만큼 반복하여 새 시퀀스 객체를 만듭니다
(0 또는 음수를 곱하면 빈 객체가 나오며 실수는 곱할 수 없습니다).

* `시퀀스객체 * 정수`
* `정수 * 시퀀스객체`

"""## 시퀀스 객체의 요소 개수 구하기

시퀀스 객체에는 요소가 여러 개 들어있죠? 
이 요소의 개수(길이)를 구할 때는 len 함수를 사용합니다(len은 길이를 뜻하는 length에서 따왔습니다).

* `len(시퀀스객체)`

### 리스트와 튜플의 요소 개수 구하기
"""

l = [10, 20, 30, 40, 50]
print("len(l)", len(l))
t = (1, 2, 3, 4, 5)
print("len(t)", len(t))


"""### range의 숫자 생성 개수 구하기"""

# range에 len 함수를 사용하면 숫자가 생성되는 개수를 구합니다.
r = range(7, 792, 15)
print("len(r) :", len(r))

"""### 문자열의 길이 구하기"""

# 문자열도 시퀀스 자료형이므로 len 함수를 사용하면 됩니다.
s = "이브 프시케 그리고 푸른 수염"
print("len(s) :", len(s))

"""여기서 문자열의 길이는 공백까지 포함합니다. 단, 문자열을 묶은 따옴표는 제외합니다. 
이 따옴표는 문자열을 표현하는 문법일 뿐 문자열 길이에는 포함되지 않습니다
(문자열 안에 포함된 작은따옴표, 큰따옴표는 포함됨)."""

# 한글 문자열의 길이도 len으로 구하면 됩니다.

"""인덱스 사용하기

이번에는 시퀀스 객체에 들어있는 요소에 접근하는 방법을 알아보겠습니다. 
시퀀스 객체의 각 요소는 순서가 정해져 있으며, 이 순서를 인덱스라고 부릅니다.

다음과 같이 시퀀스 객체에 `[ ](대괄호)`를 붙이고 [ ] 안에 각 요소의 인덱스를 지정하면 해당 요소에 접근할 수 있습니다.
"""

l = list(range(1, 11))
print("l", l)
# l이라고 하는 리스트에 있는 3번째 요소의 값을 불러오고 싶어요
print("l[3]", l[3])
# 인덱스는 0부터 시작
print("l[2]", l[2])
l2 = [3, 7, 2, 9, 1]
print(l2[1])

"""인덱스(index, 색인)는 위치 값을 뜻하는데 국어사전 옆면에 ㄱ, ㄴ, ㄷ으로 표시해 놓은 것과 비슷합니다. 
여기서 주의할 점은 시퀀스 객체의 인덱스는 항상 0부터 시작한다는 점입니다
(대다수의 프로그래밍 언어는 인덱스가 0부터 시작합니다). 따라서 리스트 a의 첫 번째 요소는 a[0]이 됩니다.
 꼭 기억해두세요.
















#앞으로 바라는 점
- 없다