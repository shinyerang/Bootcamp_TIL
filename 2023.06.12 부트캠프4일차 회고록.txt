#좋았던 점
-오늘은 수업시간보다 일찍 와서 여유가 있었다.
밥조로 먹는 기간이 끝나서 점심시간에 잘 수 있었다.
수업시간에 강사님 개그가 너무 웃겼다.

#아쉬웠던 점
-옷이 생각보다 불편해서 강의에 집중하기 힘들었다.
오늘 배운 내용이 복잡해서 이해하는데 시간이 좀 걸렸다 집에서 복습을 많이 해야겠다.

#배운 점
* 파이썬에서는 비교 연산자와 논리 연산자의 판단 결과로 True, False를 사용합니다. 
즉, 비교 결과가 맞으면 True, 아니면 False입니다.
"""

# my_age = input("당신의 나이를 입력해주세요 : ")
# my_age = int(input("당신의 나이를 입력해주세요 : "))
# print("my_age :", my_age)
# print("can_bootcamp :", my_age > 20) # 나이를 20세가 초과
# print("can_bootcamp :", my_age >= 20) # 나이를 20세가 이상 (=)
# print("can_bootcamp :", my_age - 1 >= 20) # 나이를 20세가 이상 (=) + 산술식 -> 20
# my_age = int(input("당신의 나이를 입력해주세요 : "))
# print("my_age :", my_age)
# print("avoid_law :", my_age < 14) # 나이를 14세 미만
# print("avoid_law :", my_age <= 14) # 나이를 14세 이하 (=)
# print("avoid_law :", my_age - 1 <= 14) # 나이를 14세 이하 (=) + 산술식 -> 14

* 이번에는 논리 연산자를 사용해보겠습니다. 논리 연산자는 and, or, not이 있는데 먼저 and입니다.
* `a and b`
"""

# numbers = input("AND: 숫자 두 개를 입력하세요 (스페이스로 구분): ").split()  # 문자열은 비교 연산 X
# numbers = map(int, input("숫자 두 개를 입력하세요 (스페이스로 구분): ").split())  # 문자열 -> int(소수점이 없는 정수로 변환)
# n1, n2 = numbers  # 리스트로 받게 됨
# print(n1, n2) # 20 5
# print("n1 > 10 :", n1 > 10)
# print("n2 < 10 :", n2 < 10)
# print("n1 > 10 and n2 < 10 :", (n1 > 10) and (n2 < 10))  # 비교 연산자가 논리 연산자 보다 우선적으로 계산이 된다
# print("n1 * 2 > 10 and n2 - 5 < 10 :", ((n1 * 2) > 10) and ((n2 - 5) < 10))  # 연산자처리 우선순서 -> 산술, 비교, 논리, 할당

"""* and는 두 값이 모두 True라야 True입니다. 하나라도 False이면 False가 나옵니다.

### 정수, 실수, 문자열을 불로 만들기

* 정수, 실수, 문자열을 불로 만들 때는 bool을 사용하면 됩니다. 
이때 정수 1은 True, 0은 False입니다. 만약 문자열의 내용이 'False'라도 불로 만들면 True입니다. 
문자열의 내용 자체는 판단하지 않으며 값이 있으면 True입니다.
"""

print(bool(1))
print(bool(0))
print(bool(100))
print(bool(1.1))
print(bool(0.0))
print(bool("문자열"))
print(bool(""))
# 0이랑 ""은 False다

### 리스트 만들기

* 변수에 값을 저장할 때 `[ ](대괄호)`로 묶어주면 리스트가 되며 각 값은 ,(콤마)로 구분해줍니다.
* `리스트 = [값, 값, 값]`
"""

fruits = ["apple", "banana", "kiwi"]
print("fruits", fruits)
scores = [100, 50, 70]
print("scores", scores)
check = [True, False, True]
print("check", check)
exp = [100 > 70, 50 == 100, "강사" == "강시"]
print("exp", exp)
* 리스트는 문자열, 정수, 실수, 불 등 모든 자료형을 저장할 수 있으며 자료형을 섞어서 저장해도 됩니다


### range를 사용하여 리스트 만들기

* 이번에는 range를 사용하여 리스트를 만들어보겠습니다.
 range는 연속된 숫자를 생성하는데 range에 10을 지정하면 0부터 9까지 숫자를 생성합니다. 
즉, 지정한 횟수 숫자는 생성되는 숫자에 포함되지 않습니다.
* `range(횟수)`
"""

"""* range(0, 10)이라고 나와서 10까지 생성될 것 같지만 10은 포함되지 않습니다. 
다음과 같이 list에 range(10)을 넣어보면 0부터 9까지 들어있는 리스트가 생성됩니다.
* `리스트 = list(range(횟수))`
"""

"""* range는 시작하는 숫자와 끝나는 숫자를 지정할 수도 있습니다. 
이때도 끝나는 숫자는 생성되는 숫자에 포함되지 않습니다. 
즉, list에 range(5, 12)를 넣으면 5부터 11까지 들어있는 리스트가 생성됩니다.
* `리스트 = list(range(시작, 끝))`
"""

"""* 이번에는 증가폭을 사용하는 방법입니다. range에 증가폭을 지정하면 해당 값만큼 증가하면서 숫자를 생성합니다.
* `리스트 = list(range(시작, 끝, 증가폭))`
"""

"""* range(-4, 10, 2)는 -4부터 8까지 2씩 증가합니다. 여기서 끝나는 값은 10이므로 10까지 증가하지 않고 8까지 생성됩니다.
* 만약 증가폭을 음수로 지정하면 해당 값만큼 숫자가 감소합니다.


"""## 튜플

지금까지 리스트를 사용해보았는데 파이썬에서는 튜플이라는 자료형도 제공합니다. 
튜플은 리스트처럼 요소를 일렬로 저장하지만, 안에 저장된 요소를 변경, 추가, 삭제를 할 수 없습니다.
 간단하게 읽기 전용 리스트라고 할 수 있죠

변수에 값을 저장할 때 ( )(괄호)로 묶어주면 튜플이 되며 각 값은 ,(콤마)로 구분해줍니다. 
또는, 괄호로 묶지 않고 값만 콤마로 구분해도 튜플이 됩니다.

* `튜플 = (값, 값, 값)`
* `튜플 = 값, 값, 값`

"""그런데 저장된 요소를 변경, 추가, 삭제할 수도 없는 튜플을 왜 만들어 놓았을까요?
 이유는 간단합니다. 파이썬 프로그래밍에서 튜플을 사용하는 쪽이 더 유리한 경우도 있기 때문입니다.
 보통 튜플은 요소가 절대 변경되지 않고 유지되어야 할 때 사용합니다.

튜플을 만든 상태에서 요소를 변경하게 되면 에러가 발생하게 됩니다. 
따라서 요소를 실수로 변경하는 상황을 방지할 수 있습니다.

### range를 사용하여 튜플 만들기
"""

# 다음과 같이 tuple 안에 range를 넣으면 튜플이 생성됩니다.

"""range에 시작하는 숫자와 끝나는 숫자를 지정해서 튜플을 만들 수도 있겠죠? 다음은 5부터 11까지 들어있는 튜플을 만듭니다.

* `튜플 = tuple(range(시작, 끝))`
"""



"""range에 증가폭을 지정하는 방법도 가능합니다.

* `튜플 = tuple(range(시작, 끝, 증가폭))`
"""


"""### 튜플을 리스트로 만들고 리스트를 튜플로 만들기

튜플과 리스트는 요소를 변경, 추가, 삭제할 수 있는지 없는지만 다를 뿐 기능과 형태는 같습니다. 
따라서 튜플을 리스트로 만들거나 리스트를 튜플로 만들 수도 있습니다.
"""


"""반대로 list 안에 튜플을 넣으면 새 리스트가 생성됩니다."""

"""## 리스트와 튜플로 변수 만들기"""

# 리스트와 튜플을 사용하면 변수 여러 개를 한 번에 만들 수 있습니다.
# 이때 변수의 개수와 리스트(튜플)의 요소 개수는 같아야 합니다.

# 리스트와 튜플 변수로도 변수 여러 개를 만들 수 있습니다.
# 다음과 같이 리스트와 튜플의 요소를 변수 여러 개에 할당하는 것을
# 리스트 언패킹(list unpacking), 튜플 언패킹(tuple unpacking)이라고 합니다.

# 리스트 패킹(list packing)과 튜플 패킹(tuple packing)은
# 변수에 리스트 또는 튜플을 할당하는 과정을 뜻합니다.

# 시퀀스 자료형!!!!!

# 리스트, 튜플, 문자열, range. -> 공통점. -> 값이 연속적(sequence)으로 이어져 있다
# 값이 연손적으로 이어진 자료형(자료의 형태, 자료가 저장된 방식)을 시퀀스 자료형(sequence type)

print('파이썬', '파', '이', '썬') # 단어들이 합쳐진 것 -> 문자열

# 시퀀스 자료형이 공통 기능(특징)
## 검색 기능

## 특정한 값이 (안에) 있는지 확인
## -> 요소(element) -> 묶음 안에 존재하는지를 확인
## 값 in 시퀀스객체 : 있다
## 값 not in 시퀀스객체 : 없다
## 객체 : 특정한 자료형타입에 속하는 것들 -> 객체

# 시퀀스 타입(자료형)의 속하는 시퀀스 객체들의 공통적인 기능.
# 시퀀스 타입 ⊃ (문자열, 리스트, 튜플, 레인지)
t = ("마제소바", "토리동", "부타동", "점보부타동", "반숙계란")
print("t :", t) # 튜플
print("'쌀국수' in t :", '쌀국수' in t)
r = range(500, 100, -25)
print("r :", list(r))
print("200 not in r :", 200 not in r)
print("(225, 200) not in r :", (225, 200) not in r)

# 문자열 검색
phone_number = "010-9999-9999"
print('"0" in phone_number', "0" in phone_number)
print('"010" in phone_number', "010" in phone_number)
print('"011" in phone_number', "011" in phone_number)

# 문자열은 연속된 부분집합의 형태로 단어들을 검색 (다른 시퀀스는 안됨)

## 연결(concatenate)
# 시퀀스 객체는 + 연산자를 이용하여서 객체를 서로 연결하여 새 객체를 만들 수 있음
# 시퀀스 객체 1 + 시퀀스 객체 2 (웬만하면 동일 타입... 그런데 강제로 붙이면 연결되기도 함...)
# a = [0, 1, 2, 3] ~ 100단위가 넘어가면?
# a = list(range(4))
a = list(range(100))
# b = [4, 5, 6, 7]
# b = list(range(4, 8))
b = list(range(40, 80, 7))
# c = [0, 1, 2, 3, 4, 5, 6, 7]
print("a + b :", a + b)
# 튜플
# a = ("a", "b", "c", "d")
a = tuple("abcd") # list("abcd")
# b = ("e", "f", "g", "h")
b = tuple("efgh") # list("efgh")
print("a + b :", a + b)

# 시퀀스 자료형 중에 연결 안되는 것 : range가 연결이 안됨.
# 잘 연결되는지 검사할 바에야 아예 막자

# 문자열도 시퀀스도 -> 연결(+)
# greeting = "안녕하세요! "
# my_name = input("당신의 이름 : ")
# print(greeting + my_name)

# 문자열과 숫자 연결
# money = input("받고 싶은 돈 : ")
# print(type(money))
# money = int(input("받고 싶은 돈 : "))
# print(type(money))
# # print("당신의 계좌에 " + money + "만원이 입금 되었습니다!")
# # can only concatenate str (not "int") to str -> 문자열은 문자열 끼리만 연결할 수 있다 (int는 str 아님)
# print("당신의 계좌에 " + str(money) + "만원이 입금 되었습니다!")

## 반복

# * 연산자는 시퀀스 객체를 특정 횟수만큼 반복하여 시퀀스 객체를 만듭니다 (0이나 음수를 넣으면 빈 것이 나옴)


#앞으로 바라는 점
-지금에 만족해서 딱히 없다.