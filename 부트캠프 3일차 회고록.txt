# 좋았던 점
- 수업에 지각을 했지만 다행스럽게도 수업내용을 놓치지않았다
같이 식사한 사람들이랑 대화가 너무 재밌었고 강사님의 맛집리스트 외의 맛집을 찾았다
강사님이 졸린 시간이나 집중력이 떨어지는 시간대에 재밌고 중요한 정보들을 알려주심으로 흥미를 끌어주셔서 좋다
강사님의 개발자개그들은 웃겼다

# 아쉬웠던 점
- 수업시간을 지키지 못 했다.
튜플방식은 이해했으나 일반 출력방식과의 기입방식 차이를 모르겠다
연산자의 우선순위방식에 쉬운거 같으면서 복잡하다

# 배운 점
- # 불(Bool)과 비교, 논리 연산자
## 불과 비교 연산자 사용하기
'''
* 프로그래밍 -> 참, 거짓 판단 -> 참(True) : 어떠한 조건이나 수식을 만족시키는가? / 거짓(False) : 만족시키지 못한다
* 불(Bool) 혹은 불리언(Boolean) : 참과 거짓으로 구성된 자료형. <- 조건이나 수식들이 존재하게 됨.
* 두 값의 관계를 판단하는 비교 연산자 / 두 값의 논리적 관계를 판단하는 논리 연산자
* if, while.. 구문을 작성.

# 비교 연산자 - 판단 결과
## 등호(같다, 다르다)와 부등호(크다, 작다). -> 비교하는 식이 맞으면 True 아니면 False

## 숫자가 같은지 다른지 비교
'''
* 일반적 수학에서는 =(등호)로 쓰는데, 파이썬 등 프로그래밍에서는 ==을 등호(동등 연산자, equal)로 쓴다
* =은 파이썬 뭐에요? -> 대입 연산자 -> 특정한 변수에 값을 할당해주는 연산자
* 다를 때 !=(not equal)을 사용

# 숫자 비교 : 부등호
print("10 > 20", 10 > 20)  # 초과 (왼쪽 값 기준으로 생각)
print("10 < 20", 10 < 20)  # 미만
print("10 >= 20", 10 >= 20)  # 이상
print("10 <= 20", 10 <= 20)  # 이하

# 논리 연산자 사용하기
## 논리 연산자는 and, or, not. (연산자가 꼭 특수문자나 기호일 필요는 없음)
# and, or, not -> not (1), and (2), or (3) <- 우선순위 외우면 좋음.

print("not True and False or not False", not True and False or not False)
print("(not True) and False or (not False)", False and False or True)
print("((not True) and False) or (not False)", False or True)
# 논리 연산도 ()를 통해서 강제로 우선순위를 정해줄 수 있음.
# 논리 연산을 복잡하게 하는 것에 익숙하지 않다 / 못하겠다
# 1. 괄호 사용하기 2. 변수로 끊어서 연산하기
# 논리 연산자 + 비교 연산자 (무조건 비교 연산자가 먼저임)
# 비교 연산자를 통해서 값을 비교하고 이것을 통해 True 또는 False 결과값(Bool 값이 나옴)
# 그 후에 논리 연산자가 그것을 받아서 처리함
# 산술 -> 비교 -> 논리 연산자 순. (그래도 괄호와 변수로 표현된 건 먼저 처리가 된 상태임)

# 문자열
# "" 혹은 ''로 묶여진 글자들의 묶음 (0자 이상의 글자들의 집합)
# 문자열 만들기 : " "(큰따옴표)로 묶기
double_quotation = "my name is python"
print(double_quotation)  # ctrl + space (자동완성 or 기능 추천)

# ' '(작은따옴표)로 묶기
single_quotation = 'your name is python'
print(single_quotation)

#  '''...'''로 묶거나 """..."""로 묶기
t1 = '''hello guys'''
# 큰따옴표로 묶었을 때, 중간에 큰 따옴표가 들어가면?
# text = "안녕" 안녕" # 따옴표들은 직전 따옴표와 직후 따옴표 간의 문자열을 묶는다고 인식
# text = '이름하여 '파이썬'!' # 2개의 문자열이 있다고 인식
text = "이름하여 '파이썬!'" # 전체적으로 큰따옴표로 묶였기 때문에, 안에 있는 작은 따옴표는 문자열 그 자체로 인식

# 리스트와 튜플
## 리스트 : 1개 이상의 연속된 값들의 묶음
# 리스트(List) : 목록 -> 값을 일렬로 (순서가 있게) 늘어놓은 형태

# 리스트 만들기
'''
* 변수에 값을 저장할 때 [ ](대괄호)로 묶어주면 리스트가 됨. 각 값은 ,(콤마)로 구분
* 리스트 = [값1, 값2, ...]
# range를 사용하여 리스트 만들기
'''
range는 연속된 숫자를 생성하는 기능
range(10) # 시작은 0부터 하고, 끝은 입력한 값 직전. (10->9)
0 ~ 9까지의 수의 나열
# 시작점과 끝점이 모두 있는 range
r = range(8, 14) # range(시작점, 끝점) : 시작점으로부터 시작하고, 끝점-1까지 반복되는 정수들의 집합
print(r)
print(list(r)) # 8~13까지 연속되는 정수의 리스트를 가지고 싶다?? range(8, 13+1=14) => range(8, 14) => list(...)
# 시작점(포함), 끝점(포함X)

# 시작점, 끝점, 증가폭 range
r2 = range(100, 1000, 100)  # list(range(시작, 끝, 증가폭)) => 증가폭만큼 늘어나면서 숫자 리스트를 생성
print(r2)
print(list(r2)) # [100, 200, 300, 400, 500, 600, 700, 800, 900]
print(list(range(100, 950, 100))) # 끝점을 초과하면 멈추는 개념.

r3 = range(1000, 100, -100) # 증가폭은 음수를 쓸 수 있다

# 튜플 (tuple)
'''
* 리스트처럼 요소(원소, element)들이 있다
* 튜플은 요소를 수정할 수 없음. 읽기 전용 (read-only)
* 리스트가 []라면, 튜플은 ()입니다. -> 각 값은 ,(콤마, 쉼표)로 구분.
* 변수 한 개에 => 여러 값을 (괄호 없이) ,로 구분해서 넣으면 => 역시나 튜플
* 튜플 = (값1, 값2, 값3..)
* 튜플 = 값1, 값2, 값3...
print("a3 :", a3) # 튜플도 리스트처럼 자료형의 혼합이 가능하다

# range를 사용해서 튜플 만들기
# list(...) => range => list
# tuple(...) => range => tuple
print(tuple(range(1, 100)))
# tuple(range(끝점))
# tuple(range(시작점, 끝점))
# tuple(range(시작점, 끝점, 증가폭))

# tuple을 list로 변환하고, list를 tuple로 변환하고 싶으면?
a = list(range(10)) # [0.... 9]
print(a)
b = tuple(a)
print(b) # (0....9)
c = tuple(range(5, 25, 5))
print(c)
d = list(c)
print(d)
# 리스트와 튜플로 변수 만들기
'''
* 리스트 또는 튜플을 사용하면 변수 여러 개를 한 번에 만들 수 있음
* 이 때 (만들려는) 변수의 개수와 리스트(튜플)의 요소 개수는 같아야 함
'''
l = [1, 2, 3]
a, b, c = l
print("a:", a, "b:", b, "c:", c)
t = ("dog", "cat", "cow", "bird")
d, e, f, g = t
print("d:", d, "e:", e, "f:", f, "g:", g)
d, e, f, g = ("dog", "cat", "cow", "bird") # d, e, f, g = t
d, e, f, g = "dog", "cat", "cow", "bird" # d, e, f, g = t
# 파이썬에서는 왼쪽 변수의 수와 오른쪽 값의 수가 맞으면 한 번에 변수에 값을 대입해줄 수 있다
# unpacking -> tuple unpacking

a, b, c = [1, 2, 3]  # 리스트를 분해해서 각각의 변수에 집어넣는것? : 리스트 언팩킹.

v = 10, 100, 1000 # 튜플 -> 묶어서 넣는 것 -> pack -> packing -> 튜플 패킹
l = [10, 100, 1000] # 리스트 패킹

# 앞으로 바라는 점
- 해가 잘 들어오는 시간에 햇빛이 블라인드를 뚫고 들어와서 화면이 뿌옇게 잘 보이지않는다